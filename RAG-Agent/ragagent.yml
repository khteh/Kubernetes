apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ragagent
  labels:
    app: ragagent
    component: llm-rag
spec:
  serviceName: svc-ragagent
  podManagementPolicy: Parallel # Default is OrderedReady
  replicas: 2 # Default is 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: ragagent # Has to match .spec.template.metadata.labels
      component: llm-rag
  template:
    metadata:
      labels:
        app: ragagent # Has to match .spec.selector.matchLabels
        component: llm-rag
    spec:
      terminationGracePeriodSeconds: 10
      #      affinity:
      #        podAntiAffinity:
      #          requiredDuringSchedulingIgnoredDuringExecution:
      #          - labelSelector:
      #              matchExpressions:
      #              - key: app
      #                operator: In
      #                values:
      #                - ragagent
      #            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: ragagent
          image: khteh/ragagent:latest
          imagePullPolicy: Always
          env:
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: postgresql-user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: postgresql-password
            #- name: CHROMA_TOKEN
            #  valueFrom:
            #    secretKeyRef:
            #      name: chroma-secret
            #      key: token
            - name: NEO4J_AUTH
              valueFrom:
                secretKeyRef:
                  name: neo4j-secret
                  key: NEO4J_AUTH
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/application_default_credentials.json
          ports:
            - containerPort: 443
              name: https-udp
              protocol: UDP
          startupProbe: # failureThreshold * periodSeconds long enough to cover the worst case startup time
            httpGet:
              path: /health/ready
              port: https-udp
              scheme: HTTPS
              #httpHeaders:
              #  - name: Host
              #    value: khteh.com
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /health/ready
              port: https-udp
              scheme: HTTPS
              #httpHeaders:
              #  - name: Host
              #    value: khteh.com
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /health/live
              port: https-udp
              scheme: HTTPS
              #httpHeaders:
              #  - name: Host
              #    value: khteh.com
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          volumeMounts:
            - name: ragagent-secret
              mountPath: /app/.env
              subPath: .env
              readOnly: true
            - name: gcloud-secret
              mountPath: /etc/application_default_credentials.json
              subPath: application_default_credentials.json
              readOnly: true
            - name: ragagent-config
              mountPath: /etc/ragagent_config.json
              subPath: ragagent_config.json
              readOnly: true
            - name: hypercorn-config
              mountPath: /etc/hypercorn.toml
              subPath: hypercorn.toml
              readOnly: true
            - name: log
              mountPath: /var/log/ragagent
            - name: hypercornlog
              mountPath: /var/log/hypercorn
          resources:
            limits:
              cpu: 500m
              memory: 2Gi
        - name: fluentd
          image: khteh/fluentd:latest
          volumeMounts:
            - name: log
              mountPath: /var/log/ragagent
            - name: hypercornlog
              mountPath: /var/log/hypercorn
            - name: ragagent-fluentd-config
              mountPath: /etc/td-agent
            - name: elasticsearch-template
              mountPath: /tmp/elasticsearch_template.json
              subPath: elasticsearch_template.json
              readOnly: true
            #- mountPath: /fluentd/elastic/tls.crt
            #  name: elasticsearch-ca
            #  subPath: tls.crt
            #  readOnly: true
          resources:
            limits:
              cpu: 500m
              memory: 2Gi
      volumes:
        - name: ragagent-secret
          secret:
            secretName: ragagent-secret
            items:
              - key: .env
                path: .env
        - name: gcloud-secret
          secret:
            secretName: gcloud-secret
            items:
              - key: application_default_credentials.json
                path: application_default_credentials.json
        - name: hypercorn-config
          configMap:
            name: hypercorn-config
        - name: ragagent-config
          configMap:
            name: ragagent
        - name: ragagent-fluentd-config
          configMap:
            name: ragagent-fluentd-config
        - name: elasticsearch-template
          configMap:
            name: elasticsearch-template
        - name: log
          emptyDir: {}
        - name: hypercornlog
          emptyDir: {}
        #- name: elasticsearch-ca
        #  secret:
        #    defaultMode: 420
        #    optional: false
        #    secretName: elasticsearch-eck-ca
