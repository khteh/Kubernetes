apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
  labels:
    app: postgresql
    component: sql-db
spec:
  serviceName: svc-postgresql
  podManagementPolicy: Parallel # Default is OrderedReady
  replicas: 1 # Default is 1
  selector:
    matchLabels:
      app: postgresql # Has to match .spec.template.metadata.labels
      component: sql-db
  template:
    metadata:
      labels:
        app: postgresql # Has to match .spec.selector.matchLabels
        component: sql-db
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: postgresql
          #        image: postgres:latest
          image: khteh/postgresql:latest
          imagePullPolicy: Always
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: superUserPassword
            #        - name: POSTGRES_USER This is the admin/root user
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: postgresql-user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-secret
                  key: postgresql-password
            - name: POSTGRES_DB_1
              value: AspNetCoreWebApi
            - name: POSTGRES_DB_2
              value: library
            - name: POSTGRES_DB_3
              value: school
            - name: POSTGRES_DB_4
              value: Langchain
          ports:
            - containerPort: 5432
              name: postgresql
          startupProbe: # failureThreshold * periodSeconds long enough to cover the worst case startup time
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - name: postgresql-persistent-storage
              # Check https://hub.docker.com/_/postgres on latest update on data volume mount point in the PGDATA section
              # The Dockerfile that builds the image declares a volume at <path> and if no data volume is mounted at that path then the container runtime will automatically create an anonymous volume‚Å† that is not reused across container re-creations.
              # Data will be written to the anonymous volume rather than your intended data volume and won't persist when the container is deleted and re-created.
              mountPath: /var/lib/postgresql
              subPath: postgresql
            - name: postgresql-initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgresql-initdb
          configMap:
            name: postgresql-initdb
  volumeClaimTemplates:
    - metadata:
        name: postgresql-persistent-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
